(defun change-to-prefix (symbolname)
  (goto-char (point-min))
  (while (search-forward (concat symbolname "(") nil t)
    (replace-match (concat (concat "(" symbolname) " ")))
  )

;; (defun modif1 (symbolname)
;;   (concat symbolname "("))

;; (defun modif2 (symbolname)
;;   (concat (concat "(" symbolname) " "))

;; (modif1 "asdf")

;; (modif2 "asdf")

(defun refactorrmt ()
  (interactive)
  (let ((case-fold-search nil)) ; or nil

    (change-to-prefix "aequals")
    (change-to-prefix "aequalshl")
    (change-to-prefix "aequalshr")
    (change-to-prefix "lift")
    (change-to-prefix "isBoolVal")
    (change-to-prefix "isIntVal")
    (change-to-prefix "lte")
    (change-to-prefix "ltehl")
    (change-to-prefix "ltehr")
    (change-to-prefix "lthl")
    (change-to-prefix "lthr")

    (change-to-prefix "band")
    (change-to-prefix "biff")

    (change-to-prefix "protect")

    (change-to-prefix "mgcd")
    (change-to-prefix "mmod")
    (change-to-prefix "ok")
    
    (change-to-prefix "meven")
    (change-to-prefix "ieven")

    (change-to-prefix "substitute")
    (change-to-prefix "feven")
    (change-to-prefix "fplus")
    (change-to-prefix "fminus")
    (change-to-prefix "fless")
    (change-to-prefix "fle")
    (change-to-prefix "fite")
    (change-to-prefix "app")
    (change-to-prefix "lam")
    (change-to-prefix "miu")
    (change-to-prefix "contextexp")
    (change-to-prefix "fnot")
    (change-to-prefix "fequals")
    (change-to-prefix "mequals")
    (change-to-prefix "iequals")
    (change-to-prefix "iequalshl")
    (change-to-prefix "iequalshr")
    (change-to-prefix "ftimes")
    (change-to-prefix "mtimes")
    (change-to-prefix "times")
    (change-to-prefix "timeshl")
    (change-to-prefix "timeshr")
    (change-to-prefix "fdiv")
    (change-to-prefix "mdiv")
    (change-to-prefix "div")
    (change-to-prefix "divhl")
    (change-to-prefix "divhr")
    
    (change-to-prefix "muifun")
    (change-to-prefix "uifun")
    (change-to-prefix "uifunhl")
    (change-to-prefix "uifunhr")
    (change-to-prefix "bnot")
    (change-to-prefix "not")
    (change-to-prefix "noth")
    (change-to-prefix "for")
    (change-to-prefix "forhl")
    (change-to-prefix "forhr")
    (change-to-prefix "mless") 
    (change-to-prefix "less") 
    (change-to-prefix "lesshl") 
    (change-to-prefix "lesshr") 
    (change-to-prefix "iS1") 
    (change-to-prefix "iE1") 
    (change-to-prefix "push")
    (change-to-prefix "synEq")
    (change-to-prefix "update")
    (change-to-prefix "cons")
    (change-to-prefix "mi")
    (change-to-prefix "updateh")
    (change-to-prefix "lookuph")
    (change-to-prefix "lookup")
    (change-to-prefix "pred")
    (change-to-prefix "succ")
    (change-to-prefix "assign")
    (change-to-prefix "assignh")
    (change-to-prefix "seq")
    (change-to-prefix "ite")
    (change-to-prefix "iteh")
    (change-to-prefix "while")
    (change-to-prefix "mplus")
    (change-to-prefix "plus")
    (change-to-prefix "plushl")
    (change-to-prefix "plushr")
    (change-to-prefix "mminus")
    (change-to-prefix "minus")
    (change-to-prefix "minushl")
    (change-to-prefix "minushr")
    (change-to-prefix "mle")
    (change-to-prefix "le")
    (change-to-prefix "lehl")
    (change-to-prefix "lehr")
    (change-to-prefix "I")
    (change-to-prefix "F")
    (change-to-prefix "IC")
    
    (goto-char (point-min))
    (while (search-forward "leftInit(" nil t)
      (replace-match "(leftInit "))
    
    (goto-char (point-min))
    (while (search-forward "leftLoop(" nil t)
      (replace-match "(leftLoop "))
    
    (goto-char (point-min))
    (while (search-forward "leftDone(" nil t)
      (replace-match "(leftDone "))
    
    (goto-char (point-min))
    (while (search-forward "rightInit(" nil t)
      (replace-match "(rightInit "))
    
    (goto-char (point-min))
    (while (search-forward "rightLoop(" nil t)
      (replace-match "(rightLoop "))
    
    (goto-char (point-min))
    (while (search-forward "rightDone(" nil t)
      (replace-match "(rightDone "))
    
    (goto-char (point-min))
    (while (search-forward "pair(" nil t)
      (replace-match "(pair "))
    
    (goto-char (point-min))
    (while (search-forward "init(" nil t)
      (replace-match "(init "))
    
    (goto-char (point-min))
    (while (search-forward "loop(" nil t)
      (replace-match "(loop "))
    
    (goto-char (point-min))
    (while (search-forward "loop2(" nil t)
      (replace-match "(loop2 "))
    
    (goto-char (point-min))
    (while (search-forward "done(" nil t)
      (replace-match "(done "))
    
    (goto-char (point-min))
    (while (search-forward "mzero" nil t)
      (replace-match "0"))
    
    (goto-char (point-min))
    (while (search-forward "mone" nil t)
      (replace-match "1"))
    
    (goto-char (point-min))
    (while (search-forward "mtwo" nil t)
      (replace-match "2"))
    
    (goto-char (point-min))
    (while (search-forward "msix" nil t)
      (replace-match "6"))
    
    (goto-char (point-min))
    (while (search-forward "msum(" nil t)
      (replace-match "(msum "))
    
    (change-to-prefix "f")
    (change-to-prefix "ok1")
    (change-to-prefix "ok2")
    (change-to-prefix "ok3")
    (change-to-prefix "p")
    (change-to-prefix "a")
    (change-to-prefix "b")
    (change-to-prefix "c")
    (change-to-prefix "d")
    (change-to-prefix "s")
    (change-to-prefix "i")
    (change-to-prefix "sn")

    (change-to-prefix "ca")
    (change-to-prefix "cb")
    (change-to-prefix "cc")

    (change-to-prefix "lt")
    )
  )

(global-set-key (kbd "C-c r m t") 'refactorrmt)
