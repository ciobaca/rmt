/*example*/
sorts Int/"Int", Bool/"Bool", State, nState;

signature mzero:->Int/"0", mone:->Int/"1", mtwo:->Int/"2", mthree:->Int/"3", msix:->Int/"6",
  mplus:Int Int->Int/"+", mminus:Int Int->Int/"-",
  mtimes:Int Int->Int/"*", mdiv:Int Int->Int/"div",
  mle:Int Int->Bool/"<=", mequals:Int Int->Bool/"=",

  bequals:Bool Bool->Bool/"=", band:Bool Bool->Bool/"and",
  bimplies:Bool Bool->Bool/"=>", bor:Bool Bool->Bool/"or",
  bnot:Bool->Bool/"not", true:->Bool/"true", false:->Bool/"false",

  init:Int->State, loop:Int Int->State, done:Int->State,
  protect:State Int->nState;

variables B:Bool, S:Int, N:Int, I:Int, X:Int, M:Int, VN:Int, VI:Int;

rewrite-system simplifications
  bnot(false)=>true, bnot(true)=>false, bnot(bnot(B))=>B,
  band(false, B)=>false, band(true, B)=>B, band(B, false)=>false,
  band(B, true)=>B, bimplies(true, B)=>B, bimplies(false, B)=>true,
  bor(false, B)=>B, bor(true, B)=>true, bor(B, false)=>B,
  bor(B, true)=>true, mequals(N, N)=>true, bequals(B, B)=>true,
  bequals(true, B)=>B,bequals(false, B)=>bnot(B), bequals(B, true)=>B,
  bequals(B, false)=>bnot(B), band(B, B)=>B, bor(B, B)=>B;

constrained-rewrite-system sum
  init(N) => loop(mzero, N),
  loop(S, N) /\ mle(mone, N) => loop(mplus(S, N), mminus(N, mone)),
  loop(S, N) /\ bnot(mle(mone, N)) => done(S);

constrained-rewrite-system circularities

  init(N) /\ mle(mzero,N) => done(mdiv(mtimes(N,mplus(N,mone)),mtwo)),

  loop(S,I) /\ mle(mzero,I) => done(mplus(S,mdiv(mtimes(I,mplus(I,mone)),mtwo)));

/*
constrained-rewrite-system circularities_protected

  protect(init(N), VN) /\ band(mle(mplus(N,mtwo),VN), mle(mzero,N)) => protect(done(mdiv(mtimes(N,mplus(N,mone)),mtwo)), M),

  protect(loop(S,I), VI) /\ band(mle(mplus(I,mone),VI),mle(mzero,I)) => protect(done(mplus(S,mdiv(mtimes(I,mplus(I,mone)),mtwo))), M);
*/

instrument sum sum_protected State nState protect;
cinstrument circularities circularities_protected State nState protect mplus(N,mtwo) mplus(I,mone);
prove in sum_protected : circularities_protected;
