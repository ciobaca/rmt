smt-prelude "
(define-fun hasdivisors ((x Int) (y Int) (z Int)) Bool
   (exists ((u Int))
        (and (>= u y) (<= u z) (= 0 (mod x u))))
)
(define-fun prime ((x Int)) Bool
  (not (hasdivisors x 2 (- x 1)))
)
" 


/*
Any RMT file starts with the declaration of sorts. We declare three
sorts here: Int, Bool and State. The first two sorts, Int and Bool are
interpreted as "Int" and respectively "Bool".
*/
sorts Int / "Int", Bool / "Bool", State;

/*
The next declarations are subsorting declarations. There is no need
for subsorting in this first example, so all declarations are commented
out.
*/
// subsort Int < State;

/*
The next declaration introduces all functional symbols. The first two
chunks define the symbols operating on Int's and respectively
Bool's. Note that we have to define even the constant symbols and
their interpretation.
*/
signature
  // math built-in function symbols
  mzero : -> Int / "0", mone : -> Int / "1", mtwo : -> Int / "2",
  mfour : -> Int / "4", 
  mnine: -> Int / "9", 
  mplus : Int Int->Int / "+", mminus : Int Int->Int / "-",
  mtimes : Int Int->Int / "*", mdiv : Int Int->Int / "div",
  mmod : Int Int->Int / "mod",
  mless : Int Int -> Bool / "<",
  mle : Int Int->Bool / "<=", mequals : Int Int->Bool / "=",
  mhasdiv : Int Int Int -> Bool / "hasdivisors",
  mprime : Int -> Bool / "prime",

  // bool built-in function symbols
  bequals : Bool Bool->Bool / "=", band : Bool Bool->Bool / "and",
  bimplies : Bool Bool->Bool / "=>", bor : Bool Bool->Bool / "or",
  bnot : Bool->Bool / "not", true : ->Bool / "true", false : ->Bool / "false",

/*
The following function symbols are not built-in and therefore they are
uninterpreted. "init", "loop" and "done" are therefore the only
constructors for the sort "State".
*/
  init : Int -> State, loop : Int Int -> State, done : Int -> State;

/*
Up next, we have to declare all variables that we use throughout the
rest of the file.
*/
variables B : Bool, S : Int, N : Int, I : Int;

/*
The following declaration introduces a rewrite system called
"simplifications". This is a special rewrite system, because the
system will use it to simplify constraints and other terms. It is the
responsability of the user to ensure that the rewrite rules are sound,
in the sense that the interpretation of the left-hand side is the same
as the interpretation of the right-hand side. Moreover, the rules need
to be terminating. You can add other rules here, depending on what you
need. For example, it might help to add mplus(N, mzero) => N, which
will make sure that RMT simplifies all additions by zero. Note that
the syntax is infix. All terms are written using infix syntax in
RMT. This might seem annoying at times, but it helps by removing
sources of ambiguities that are difficult to debug.
*/
rewrite-system simplifications
  bnot(false) => true, bnot(true) => false, bnot(bnot(B)) => B,
  band(false, B) => false, band(true, B) => B, band(B, false) => false,
  band(B, true) => B, bimplies(true, B) => B, bimplies(false, B) => true,
  bor(false, B) => B, bor(true, B) => true, bor(B, false) => B,
  bor(B, true) => true, mequals(N, N) => true, bequals(B, B) => true,
  bequals(true, B) => B,bequals(false, B) => bnot(B), bequals(B, true) => B,
  bequals(B, false) => bnot(B), band(B, B) => B, bor(B, B) => B;

/*
Now follows the most important part of the file, the declaration of a
constrained term rewriting system (CTRS) called "sum". There are three
constrained rewrite rules. The idea of the "sum" CTRS is to compute
the sum of the first N natural numbers as follows: the term init(N) is
meant to be the initial term of the computation. It immediately
rewrites into loop(mzero, N). Recall from the declarations above that
mzero is a nullary function symbol that is interpreted as the integer
"0". The loop symbol has arity 2 and its two parameters are: (1) an
accumulator holding the sum so far and (2) a counter N - the numbers
it still has to add to the accumulator.

The second rewrite rule corresponds to the case where the computation
is not yet done: the number N is greater than 1 (denoted by the
condition "/\ mle(mone, N)" -- where mle is interpreted as
less-or-equal). In this case the accumulator is increased by N and the
counter decreases by one.

The third rewrite rule corresponds to the termination condition. In
case the counter is less than 1, the term is rewritten into done(S),
where S is the sum accumulated so far.
*/
constrained-rewrite-system composability

  init(N) => loop(N, mtwo),

  loop(N, I) /\ band(mless(I, N), mequals(mmod(N, I), mzero)) => done(mzero),

  loop(N, I) /\ band(mless(I, N), bnot(mequals(mmod(N, I), mzero))) =>
    loop(N, mplus(I, mone)),

  loop(N, I) /\ bnot(mless(I, N)) => done(mone);

constrained-rewrite-system circularities

  init(N) /\ band(mle(mzero, N), mprime(N)) => done(mone),
//   init(N) /\ band(mle(mzero, N), bnot(mprime(N))) => done(mzero),

  loop(N, I) /\ band(mle(mzero, N),
                 band(mle(mone, I),
		 band(mle(mplus(I, mone), N),
		      bnot(mhasdiv(N, I, mminus(N, mone)))))) => done(mone);

/*
*/
//search [3,3] in composability : init(mnine);

prove in composability : circularities;
