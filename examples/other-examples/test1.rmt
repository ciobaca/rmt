sorts Int/"Int", Bool/"Bool", State;
// subsort Int < State;

signature mzero:->Int/"0", mone:->Int/"1", mtwo:->Int/"2",
  mplus:Int Int->Int/"+", mminus:Int Int->Int/"-",
  mtimes:Int Int->Int/"*", mdiv:Int Int->Int/"div",
  mle:Int Int->Bool/"<=", mequals:Int Int->Bool/"=",

  bequals:Bool Bool->Bool/"=", band:Bool Bool->Bool/"and",
  bimplies:Bool Bool->Bool/"=>", bor:Bool Bool->Bool/"or",
  bnot:Bool->Bool/"not", true:->Bool/"true", false:->Bool/"false",

  f : Int -> State,
  ok1 : Int -> State,
  ok2 : Int -> State,
  ok3 : Int -> State,
  ok : -> State;

variables B:Bool, S:Int, N:Int, I:Int;

rewrite-system simplifications
  bnot(false)=>true, bnot(true)=>false, bnot(bnot(B))=>B,
  band(false, B)=>false, band(true, B)=>B, band(B, false)=>false,
  band(B, true)=>B, bimplies(true, B)=>B, bimplies(false, B)=>true,
  bor(false, B)=>B, bor(true, B)=>true, bor(B, false)=>B,
  bor(B, true)=>true, mequals(N, N)=>true, bequals(B, B)=>true,
  bequals(true, B)=>B,bequals(false, B)=>bnot(B), bequals(B, true)=>B,
  bequals(B, false)=>bnot(B), band(B, B)=>B, bor(B, B)=>B;

constrained-rewrite-system sum
  f(mplus(N, mplus(N, N))) => ok1(N),
  f(mplus(mplus(N, mplus(N, N)), mone)) => ok2(N),
//  f(mplus(mplus(N, mplus(N, N)), mtwo)) => ok3(N),
  ok1(N) => ok,
  ok2(N) => ok,
  ok3(N) => ok;

constrained-rewrite-system circ
  f(N) => ok;

//search [0,2] in sum :
//  f(N);
prove in sum :
  circ;
