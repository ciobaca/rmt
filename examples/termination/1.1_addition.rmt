/*
  Example 1 from http://francois.bobot.eu/mpri2017/lecture1.pdf
  Simple example which simulates the addition of two numbers in linear time
  The circularity should be proven successfully
*/
sorts Int/"Int", Bool/"Bool", State, nState;

signature mzero:->Int/"0", mone:->Int/"1", mtwo:->Int/"2",
  mplus:Int Int->Int/"+", mminus:Int Int->Int/"-",
  mtimes:Int Int->Int/"*", mdiv:Int Int->Int/"div",
  mle:Int Int->Bool/"<=", mequals:Int Int->Bool/"=",

  bequals:Bool Bool->Bool/"=", band:Bool Bool->Bool/"and",
  bimplies:Bool Bool->Bool/"=>", bor:Bool Bool->Bool/"or",
  bnot:Bool->Bool/"not", true:->Bool/"true", false:->Bool/"false",

  init:Int Int->State, loop:Int Int->State, done:Int->State,
  protect:State Int->nState;

variables B:Bool, S:Int, N:Int, I:Int, x:Int, y:Int, VN:Int, VI:Int, REZ:Int;

rewrite-system simplifications
  bnot(false)=>true, bnot(true)=>false, bnot(bnot(B))=>B,
  band(false, B)=>false, band(true, B)=>B, band(B, false)=>false,
  band(B, true)=>B, bimplies(true, B)=>B, bimplies(false, B)=>true,
  bor(false, B)=>B, bor(true, B)=>true, bor(B, false)=>B,
  bor(B, true)=>true, mequals(N, N)=>true, bequals(B, B)=>true,
  bequals(true, B)=>B,bequals(false, B)=>bnot(B), bequals(B, true)=>B,
  bequals(B, false)=>bnot(B), band(B, B)=>B, bor(B, B)=>B;

constrained-rewrite-system suma
  loop(x, y) /\ bnot(mle(y,mzero)) => loop(mplus(x,mone), mminus(y,mone)),
  loop(x, y) /\ mle(y,mzero) => done(x);

constrained-rewrite-system circularities
  loop(x, y) /\ bnot(mle(y,mzero)) => done(mplus(x,y));


//prove in suma : circularities;
instrument suma suma_protected State nState protect;
cinstrument circularities circularities_protected State nState protect mplus(y,mtwo);
prove in suma_protected : circularities_protected;
