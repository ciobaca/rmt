/*
  Example for the Zune Bug

  The Zune Bug is a famous termination bug in Microsoft's MP3 player Zune.

  It manifested itself on December 31st, 2008, when the Zune devices
  went into an infinite loop at boot time.

  The code that was responsible for the infinite loop is:

year = ORIGINYEAR; // = 1980 

while (days > 365)
{
    if (IsLeapYear(year))
    {
        if (days > 366)
        {
            days -= 366;
            year += 1;
        }
    }
    else
    {
        days -= 365;
        year += 1;
    }
}

  The Zune Bug is decribed in detail here:
  https://techcrunch.com/2008/12/31/zune-bug-explained-in-detail/

  The program in this example is partially correct but does not
terminate *** in the last day of a leap year ***.

   We analyze a simplified version of the program, using a
configuration of the form loop(D,Y), where D stores the value of the
program variable "days" and Y the value of the program variable
"year".

  We manually create a rewrite system that simulates the above program
(but note that it could be automatically obtained using a tool such as
C2LCTRS). Note that we have simplified the leap year condition
(reduced it to divisinility by 4), since the extra conditions do not
add anything to the idea illustrated.

  This file shows that the system is okay in the sense of partial
  correctness.

Run with:
> rmt[.exe] < 2.1_zune_partial.rmt
Expected output:
... Circularity #1 proved. ...

*/
sorts Int/"Int", Bool/"Bool", State, nState;

signature mzero:->Int/"0", mone:->Int/"1", mtwo:->Int/"2", mthree:->Int/"3", mfour:->Int/"4", msix:->Int/"6", mtsf:->Int/"365", mtss:->Int/"366",
  mplus:Int Int->Int/"+", mminus:Int Int->Int/"-",
  mtimes:Int Int->Int/"*", mdiv:Int Int->Int/"div", mmod:Int Int->Int/"mod",
  mle:Int Int->Bool/"<=", mequals:Int Int->Bool/"=",

  bequals:Bool Bool->Bool/"=", band:Bool Bool->Bool/"and",
  bimplies:Bool Bool->Bool/"=>", bor:Bool Bool->Bool/"or",
  bnot:Bool->Bool/"not", true:->Bool/"true", false:->Bool/"false",

  init:Int->State, loop:Int Int->State, done:Int->State,
  protect:State Int->nState;

variables B:Bool, S:Int, N:Int, I:Int, X:Int, M:Int, VN:Int, VI:Int, D:Int, Y:Int;

rewrite-system simplifications
  bnot(false)=>true, bnot(true)=>false, bnot(bnot(B))=>B,
  band(false, B)=>false, band(true, B)=>B, band(B, false)=>false,
  band(B, true)=>B, bimplies(true, B)=>B, bimplies(false, B)=>true,
  bor(false, B)=>B, bor(true, B)=>true, bor(B, false)=>B,
  bor(B, true)=>true, mequals(N, N)=>true, bequals(B, B)=>true,
  bequals(true, B)=>B,bequals(false, B)=>bnot(B), bequals(B, true)=>B,
  bequals(B, false)=>bnot(B), band(B, B)=>B, bor(B, B)=>B;

constrained-rewrite-system zune
  loop(D,Y) /\ mle(D,mtsf) => done(Y),
  //simplified condition for leap year
  loop(D,Y) /\ band(bnot(mle(D,mtsf)),band(mequals(mmod(Y,mfour),mzero),bnot(mle(D,mtss)))) => loop(mminus(D,mtss),mplus(Y,mone)),
  loop(D,Y) /\ band(bnot(mle(D,mtsf)),band(mequals(mmod(Y,mfour),mzero),mle(D, mtss))) => loop(D,Y),
  loop(D,Y) /\ band(bnot(mle(D,mtsf)),bnot(mequals(mmod(Y,mfour),mzero))) => loop(mminus(D,mtsf),mplus(Y,mone));

constrained-rewrite-system proof_obligation
  loop(D,Y) /\ mle(mzero,D) => done(N);

prove in zune : proof_obligation;
// succeeds, as expected (in the sense of partial correctness)
