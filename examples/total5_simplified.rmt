/* example for sum in n^2 */
sorts Int/"Int", Bool/"Bool", State, nState, Nat;

signature mzero:->Int/"0", mone:->Int/"1", mtwo:->Int/"2", mthree:->Int/"3",
  mplus:Int Int->Int/"+", mminus:Int Int->Int/"-",
  mtimes:Int Int->Int/"*", mdiv:Int Int->Int/"div",
  mle:Int Int->Bool/"<=", mequals:Int Int->Bool/"=",

  bequals:Bool Bool->Bool/"=", band:Bool Bool->Bool/"and",
  bimplies:Bool Bool->Bool/"=>", bor:Bool Bool->Bool/"or",
  bnot:Bool->Bool/"not", true:->Bool/"true", false:->Bool/"false",

  nzero:->Nat,
  a:Nat->State, b:Nat Nat->State, c:Nat Nat Nat->State, d:Nat->State, s:Nat->Nat,
  sn:Int->Nat,
  protect:State Int->nState;

variables B:Bool, N:Int, M:Int, m:Nat, n:Nat, x:Nat, y:Nat;

rewrite-system simplifications
  bnot(false)=>true, bnot(true)=>false, bnot(bnot(B))=>B,
  band(false, B)=>false, band(true, B)=>B, band(B, false)=>false,
  band(B, true)=>B, bimplies(true, B)=>B, bimplies(false, B)=>true,
  bor(false, B)=>B, bor(true, B)=>true, bor(B, false)=>B,
  bor(B, true)=>true, mequals(N, N)=>true, bequals(B, B)=>true,
  bequals(true, B)=>B,bequals(false, B)=>bnot(B), bequals(B, true)=>B,
  bequals(B, false)=>bnot(B), band(B, B)=>B, bor(B, B)=>B;

constrained-rewrite-system sum
  a(n) => b(n, nzero),
  b(n, x) => c(n, n, x),
  c(m, s(n), x) => c(m, n, s(x)),
  c(s(m), nzero, x) => c(m, m, x),
  c(nzero, nzero, x) => d(x);
  

constrained-rewrite-system circularities

  a(n) => d(x),
  c(n, m, x) => d(y);

//instrument sum sum_protected State nState protect;
//prove in sum_protected : circularities_protected;

prove in sum  : circularities;

