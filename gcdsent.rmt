smt-prelude "(define-fun-rec gcd ((x Int) (y Int)) Int
     (ite (= y 0)
      x
      (gcd y (mod x y))
     )
)"

sorts Int / "Int", Bool / "Bool", State;
// subsort Int < State;

signature mzero : -> Int / "0", mone : -> Int / "1", mtwo : -> Int / "2", mthree : -> Int / "3",
  mplus : Int Int->Int / "+", mminus : Int Int->Int / "-",
  mtimes : Int Int->Int / "*", mdiv : Int Int->Int / "div",
  mle : Int Int->Bool / "<=", mequals : Int Int->Bool / "=",
  mgcd : Int Int -> Int / "gcd", mg : Int Int -> Bool / ">",
  mmod : Int Int -> Int / "mod",

  bequals : Bool Bool->Bool / "=", band : Bool Bool->Bool / "and",
  bimplies : Bool Bool->Bool / "=>", bor : Bool Bool->Bool / "or",
  bnot : Bool->Bool / "not", true : ->Bool / "true", false : ->Bool / "false",

  init : Int Int -> State, loop : Int Int Int Int Int Int Int Int -> State, done : Int Int Int Int Int -> State,
  ok : Int Int -> State;

variables S : Int, N : Int, I : Int, J : Int, X : Int, Y : Int, Z : Int, A : Int, B : Int,
 C : Int, D : Int, BB : Bool;

rewrite-system simplifications
  bnot(false) => true, bnot(true) => false, bnot(bnot(BB)) => BB,
  band(false, BB) => false, band(true, BB) => BB, band(BB, false) => false,
  band(BB, true) => BB, bimplies(true, BB) => BB, bimplies(false, BB) => true,
  bor(false, BB) => BB, bor(true, BB) => true, bor(BB, false) => BB,
  bor(BB, true) => true, mequals(N, N) => true, bequals(BB, BB) => true,
  bequals(true, BB) => BB,bequals(false, BB) => bnot(BB), bequals(BB, true) => BB,
  bequals(BB, false) => bnot(BB), band(BB, BB) => BB, bor(BB, BB) => BB;

constrained-rewrite-system gcd
  init(X, Y) => loop(X, Y, X, Y, mone, mzero, mzero, mone),

  loop(I, J, X, Y, A, B, C, D) /\ bnot(mequals(Y, mzero)) =>
  loop(I, J, Y, mmod(X, Y),//mminus(X, mtimes(mdiv(X, Y), Y)),
       C, D,
       mminus(A, mtimes(mdiv(X, Y), C)), mminus(B, mtimes(mdiv(X, Y), D))),

  loop(I, J, X, Y, A, B, C, D) /\ mequals(Y, mzero) => done(I, J, X, A, B),

  done(I, J, mgcd(I, J), A, B) /\ mequals(mgcd(I, J), mplus(mtimes(A, I), mtimes(B, J))) => ok(I, J);

constrained-rewrite-system circ
  init(X, Y) => ok(X, Y),

  loop(I, J, X, Y, A, B, C, D) /\ band(band(
  	  mequals(X, mplus(mtimes(A, I), mtimes(B, J))),
	  mequals(Y, mplus(mtimes(C, I), mtimes(D, J)))),
	  mequals(mgcd(X, Y), mgcd(I, J))) => ok(I, J);

prove in gcd : circ;
