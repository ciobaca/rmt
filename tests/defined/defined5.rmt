sorts State, ExpF;

subsort Int < ExpF;

signature
  box : Int -> ExpF,
  pair : ExpF ExpF -> State,
  fplus : ExpF ExpF -> ExpF,
  f : ExpF -> ExpF,
  fa : ExpF ExpF ExpF -> ExpF;

variables N:Int, I:Int, S:Int, E : ExpF, X : Int, A : Int;

define reduce : Int Int ExpF -> ExpF by
  (reduce N I E) /\ (mle N I) => E,
  (reduce N I E) /\ (bnot (mle N I)) => (reduce N (mplus I 1) (fplus I E));

constrained-rewrite-system flanguage
  (f N) /\ (mle N 0) => 0,
  (f N) /\ (bnot (mle N 0)) => (fplus N (f (mminus N 1))),
  (fa A I N) /\ (bnot (mle I N)) => A,
  (fa A I N) /\ (mle I N) => (fa (mplus A I) (mplus I 1) N),
  (fplus N I) => (mplus N I);

// definedsearch [1,2] (reduce I 0 N) for reduce;

//definedsearch (reduce N I (f (mminus I 1))) /\ (mle I N) for reduce;

// compute (reduce 11 4 (f (mminus 4 1)));

// run in flanguage : (fplus 3 (fplus 2 (f 1)));

// run in flanguage : (f 3);

// run in flanguage : (fa 0 0 3);

// run in flanguage : (fa 0 2 (mminus 4 1));

//definedsearch (reduce (mplus N 1) (mplus I 1) (f I)) /\ (band (mle I N) (mle 0 I)) for reduce;

//definedsearch (reduce (mplus 1 N) (mplus 2 I) (fplus (mplus I 1) (f I))) /\ (band (mle I (mplus N 1)) (bnot (mle N I))) for reduce;

// definedsearch    (pair
//     (reduce (mplus N 1) (mplus I 1) (f I))
//     (fa 0 0 N)) /\ (band (mle I N) (mle 0 I));

show-simulation [ 20 ] in flanguage and flanguage :
   (pair
    (f N)
    (fa 0 0 N)) /\ (mle 0 N)
,
   (pair
    (reduce (mplus N 1) (mplus I 1) (f I))
    (fa 0 0 N)) /\ (band (mle I N) (mle 0 I))
,
    (pair
     (reduce (mplus N 1) I X)
     (fa X I N))
// // expanded from circularity #3
// ,
//    (pair
//      (reduce (mplus N 1) (mplus I 1) (fplus I X))
//      (fa X I N))
// ,
//    (pair
//      X
//      (fa X I N)) /\ (bnot (mle I N))
// // expanded from circularity #2 (one of resulting cases)
// ,
//    (pair
//      (reduce (mplus 1 N) (mplus 2 I) (fplus (mplus I 1) (f I)))
//      (fa 0 0 N)) /\ (band (mle I (mplus N 1)) (bnot (mle N I)))
// ,
// // expanded from case above (2 levels down from circuliarty #2)
//    (pair
//      (fplus (mplus 1 I) (f I))
//      (fa 0 0 N))
//      /\ (band (mle I (mplus 1 N)) (band (bnot (mle N I)) (mle N (mplus 1 I))))
// ,
//    (pair
//      (reduce (mplus 1 N) (mplus 3 I) (fplus (mplus 2 I) (fplus (mplus 1 I) (f I))))
//      (fa 0 0 N)) /\ (band (mle I (mplus 1 N)) (band (bnot (mle N I)) (bnot (mle N (mplus 1 I)))))
with-base
     (pair S S);

//definedsearch (reduce N I (f (mminus I 1))) for reduce;

//definedsearch (reduce N (mplus 1 I) (fplus I (f (mminus I 1)))) for reduce;

// compute (reduce 3 3 (f (mminus 3 1)));

// compute (reduce 3 2 (f (mminus (mminus 3 1) 1)));

// compute (reduce 3 1 (f (mminus (mminus (mminus 3 1) 1) 1)));

// (f N)                         ~ (fa 0 N)            if N >= 0

// (reduce N I (f (mminus I 1))) ~ (fa 0 (mminus N 1)) if N >= I
// echivalenta cu 2 circularitati:
// (f (mplus (mminus 0 1) I)) /\ (band (mle I N) (mle N I))   ~ ...
// (reduce N (mplus 1 I) (fplus I (f (mplus (mminus 0 1) I)))) /\ (band (mle I N) (bnot (mle N I)))                                           ~ ...

// (reduce N I X)                ~ (fa X (mminus N I)) if N >= I
// S                             ~ S

// definedsearch (reduce N I (f (mminus I 1))) /\ (mle I N) for reduce;

//search in flanguage : (f (mplus (mminus 0 1) I)) /\ (band (mle I N) (mle N I));

// search in flanguage : (reduce N (mplus 1 I) (fplus I (f (mplus (mminus 0 1) I)))) /\ (band (mle I N) (bnot (mle N I)));

// compute (reduce 3 1 0);

// compute (reduce 3 2 1);

// compute (reduce 3 3 3);

